{"version":3,"sources":["webpack:///./src/app/components/repertoar/repertoar.component.css","webpack:///./src/app/components/repertoar/repertoar.component.html","webpack:///./src/app/components/repertoar/repertoar.component.ts","webpack:///./src/app/components/repertoar/repertoar.module.ts","webpack:///./src/app/components/repertoar/repertoar.routing.ts","webpack:///./src/app/services/repertoar.service.ts"],"names":[],"mappings":"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","file":"components-repertoar-repertoar-module.js","sourcesContent":["module.exports = \"\"","module.exports = \"<div class=\\\"container-body\\\">\\n  <div class=\\\"container-repertoire\\\">\\n    <div class=\\\"title\\\">Repertoar</div>\\n    <div class=\\\"predstave\\\">\\n      <div *ngFor=\\\"let repertoar of repertoars; let i = index let last = last\\\" class=\\\"lista-predstava\\\">\\n        <div class=\\\"predstava\\\">\\n          <div class=\\\"left\\\">\\n            <div class=\\\"dan\\\">{{repertoar.datum | date:'d'}}</div>\\n            <div class=\\\"mesec\\\">{{repertoar.datum | date:'MMM'}}</div>\\n          </div>\\n          <div class=\\\"right\\\">\\n              <div class=\\\"naziv\\\" [routerLink]=\\\"['/predstava',repertoar.predstava.id]\\\">{{repertoar.predstava.naslov}}</div>\\n              <div class=\\\"opis\\\">\\n                <div class=\\\"kategorija\\\" [routerLink]=\\\"['/predstava',repertoar.predstava.id]\\\">{{kategorija(repertoar.predstava.opis)}} </div>\\n              <div class=\\\"vreme\\\">\\n                <div class=\\\"ukras\\\"></div>\\n                <div class=\\\"tacno-vreme\\\">\\n                  <span>{{repertoar.datum | date:'HH:mm'}}</span> ƒçasova</div>\\n              </div>\\n            </div>\\n          </div>\\n        </div>\\n        <div *ngIf=\\\"!last\\\" class=\\\"prazna-linija\\\">\\n          <div class=\\\"left\\\"></div>\\n        </div>\\n      </div>\\n    </div>\\n    <div class=\\\"pagination\\\">\\n        <div class=\\\"left\\\" (click)=\\\"ocitajStranu(0)\\\"></div>\\n        <div class=\\\"page\\\" >\\n          <span><span *ngIf= \\\"currentPageNumber<10\\\">0</span>{{currentPageNumber+1}}</span>\\n        </div>\\n        <div class=\\\"line\\\" >\\n            <!-- *ngFor=\\\"let number of ukupnoStranaNiz; let i=index\\\"\\n          <a [ngStyle]=\\\"{'border': currentPageNumber == i ? '2px solid #337ab7' : '#ddd'}\\\"\\n               (click)=\\\"ocitajStranu(i)\\\" class=\\\"page-link\\\" style=\\\"margin-left: 1px\\\">{{i+1}}</a> -->\\n        </div>\\n        <div class=\\\"pages\\\">\\n            <span><span *ngIf= \\\"ukupnoStrana<10\\\">0</span>{{ukupnoStrana}}</span>\\n        </div>\\n        <div class=\\\"right\\\"  (click)=\\\"ocitajSledecuStranu()\\\"></div>\\n      </div>\\n    <!-- <div class=\\\"pagination\\\">\\n      <div class=\\\"left\\\"></div>\\n      <div class=\\\"page\\\">\\n        <span>01</span>\\n      </div>\\n      <div class=\\\"line\\\"></div>\\n      <div class=\\\"pages\\\">\\n        <span>05</span>\\n      </div>\\n      <div class=\\\"right\\\"></div>\\n    </div> -->\\n    <div class=\\\"archive\\\">\\n      <div>\\n        <div class=text>ARHIVA</div>\\n        <div class=line></div>\\n      </div>\\n    </div>\\n  </div>\\n</div>\\n\\n\\n\\n\\n\\n\\n<!--\\n<div *ngFor=\\\"let repertoar of repertoars; let i = index\\\">  \\n  <h1> zdravo ovo je mesec {{repertoar.datum | date:'MMM'}}</h1>\\n  <h1> zdravo ovo je dan {{repertoar.datum | date:'d'}}</h1>\\n  <h1> zdravo ovo je vreme {{repertoar.datum | date:'shortTime'}}</h1>\\n  <div>{{repertoar.predstava.naslov}}</div> \\n  <div>{{repertoar.predstava.opis}}</div> \\n</div>\\n-->\\n\"","import { Component, OnInit } from '@angular/core';\nimport { Repertoar } from 'src/app/model/repertoar';\nimport { RepertoarService } from 'src/app/services/repertoar.service';\n\n@Component({\n  selector: 'app-repertoar',\n  templateUrl: './repertoar.component.html',\n  styleUrls: ['./repertoar.component.css']\n})\nexport class RepertoarComponent implements OnInit {\n\n  // constructor (private repertoarService: RepertoarService) { }\n\n  // ngOnInit() {\n  //   this.repertoarService.getRepertoar().subscribe((repertoars) => {\n  //     this.repertoars = repertoars;\n  //   });\n  //   this.repertoarService.getRepertoar();\n  //   // this.istorijatService.istorijats.subscribe(data => console.log(data));\n\n  // }\n\n  public currentPageNumber: number;\n  // tslint:disable-next-line:no-inferrable-types\n  public sizePage: number = 6;\n  public repertoars: Repertoar[];\n  public ukupnoRepertoara: number;\n  public ukupnoStrana: number;\n  public ukupnoStranaNiz: any[];\n  public repertoar: Repertoar;\n  public id?: number;\n\n\n\n  constructor(private repertoarService: RepertoarService) { }\n\n  ngOnInit() {\n    this.currentPageNumber = 0;\n    this.loadDate();\n\n  }\n\n  loadDate() {\n    this.repertoarService.getRepertoar(this.currentPageNumber, this.sizePage)\n    .subscribe(\n      (data) => { this.repertoars = data.body;\n                  this.ukupnoRepertoara = + data.headers.get('X-Total-Count');\n                  this.ukupnoStrana = Math.ceil(this.ukupnoRepertoara / this.sizePage);\n                  // this.ukupnoStranaNiz = Array(this.ukupnoStrana).fill(4);\n                  // console.log(this.ukupnoStranaNiz);\n                }\n    );\n  }\n\n  delete(index: number) {\n    console.log(this.repertoars[index]);\n  }\n\n  ocitajStranu(i) {\n    this.currentPageNumber = i;\n    this.loadDate();\n  }\n\n  ocitajSledecuStranu() {\n    if (this.currentPageNumber == this.ukupnoStrana - 1){\n      return\n    }\n    this.currentPageNumber = this.currentPageNumber +  1;\n    this.loadDate();\n  }\n\n  // izvlaci kategoriju iz opisa - potrebno je da opis u svom sadrzaju ima podeljen sadrzaj sa * primer: komedija*Ovo je predstava o tome i tome...\n  public kategorija(s?: string) {\n   const array = s.split('*');\n   return array[0];\n  }\n\n}\n","import { NgModule } from '@angular/core';\r\nimport { CommonModule } from '@angular/common';\r\nimport {routing} from './repertoar.routing';\r\nimport { VestiModule } from 'src/app/components/vesti/vesti.module';\r\nimport { RepertoarComponent } from 'src/app/components/repertoar/repertoar.component';\r\n\r\n@NgModule({\r\n  imports: [\r\n    CommonModule,\r\n    routing,\r\n  ],\r\n  declarations: [RepertoarComponent],\r\n  providers: []\r\n})\r\nexport class RepertoarModule { }\r\n","import {Routes, RouterModule} from '@angular/router';\r\nimport {ModuleWithProviders} from '@angular/core';\r\nimport { RepertoarComponent } from 'src/app/components/repertoar/repertoar.component';\r\n\r\nconst routes: Routes = [\r\n  { path: '', component: RepertoarComponent},\r\n  // { path: '', redirectTo: 'pstrana', pathMatch: 'full'},\r\n  // { path: 'login', loadChildren: './components/login/login.module#LoginModule'}\r\n];\r\n\r\nexport const routing: ModuleWithProviders = RouterModule.forChild(routes);\r\n","import { Injectable } from '@angular/core';\nimport { Repertoar } from 'src/app/model/repertoar';\nimport { Subject } from 'rxjs';\nimport { HttpHeaders } from '@angular/common/http';\nimport { HttpClient } from '@angular/common/http';\nimport { Observable } from 'rxjs/internal/Observable';\nimport { HttpResponse } from '@angular/common/http';\nimport { HttpParams } from '@angular/common/http';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class RepertoarService {\n\n  public repertoar: Subject<Repertoar[]> = new Subject();\n  private path = '/api/repertoar';\n  private header = new HttpHeaders({ 'Content-Type': 'application/json' });\n\n  constructor(private http: HttpClient) { }\n\n  getRepertoar(page: number, size ): Observable<HttpResponse<Repertoar[]>> {\n\n    let params = new HttpParams();\n    params = params.append('page', page.toString());\n    params = params.append('size', size.toString());\n\n    return this.http.get(this.path,  {params: params, observe: 'response' }) as Observable<HttpResponse<Repertoar[]>>;\n  }\n\n//   getProjects(page: number, size ): Observable<HttpResponse<Projekat[]>>{\n\n//     let params = new HttpParams();\n//     params = params.append('page', page.toString());\n//     params = params.append('size', size.toString());\n\n//     return this.http.get(this.path, {params:params, observe: 'response' }) as Observable<HttpResponse<Projekat[]>>;\n//  }\n\n//   getCompany(id: number): Observable<Company> {\n//     // console.log('JEDAN USER ID', id);\n//     return this.http.get(`${this.path}/${id}`) as Observable<Company>;\n//   }\n\n//   deleteCompany(company: Company) {\n//     return this.http.delete(`${this.path}/${company.id}`);\n//   }\n\n//   saveCompany(company: Company): Observable<Company> {\n//     if (company.id === undefined) {\n//       return this.http.post(this.path, company, {headers: this.header}) as Observable<Company>;\n//     }\n//     else {\n//       return this.http.put(`${this.path}/${company.id}`, company, {headers: this.header}) as Observable<Company>;\n//     }\n//   }\n\n//   getCompanyByName(name: string): Observable<Company[]>  {\n//    return this.http.get(this.path + '?name=' + name) as Observable<Company[]>;\n//   }\n// }\n}\n"],"sourceRoot":""}